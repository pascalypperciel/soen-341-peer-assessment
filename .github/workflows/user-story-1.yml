name: User Story 1 - Build the Project and Environment

on:
  push:
    branches:
      - main
      - 'sprint-*'
  pull_request:
    branches:
      - main
      - 'sprint-*'
  workflow_dispatch:
    branches:
      - '**'
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      node-version:
        required: true
        type: string
    secrets:
      db-driver:
        required: true
      db-server:
        required: true
      db-database:
        required: true
      db-username:
        required: true
      db-password:
        required: true

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    env:
      DB_DRIVER: ${{ secrets.db-driver || secrets.DB_DRIVER }}
      DB_SERVER: ${{ secrets.db-server || secrets.DB_SERVER }}
      DB_DATABASE: ${{ secrets.db-database || secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.db-username || secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.db-password || secrets.DB_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install ODBC Driver for SQL Server
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18

    - name: Parse and set DB connection environment variables
      run: |
        echo "DB_DRIVER=$DB_DRIVER" >> $GITHUB_ENV
        echo "DB_SERVER=$DB_SERVER" >> $GITHUB_ENV
        echo "DB_DATABASE=$DB_DATABASE" >> $GITHUB_ENV
        echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV
        echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

    - name: Set PYTHONPATH
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)

    - name: Install backend dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt

    - name: Run backend tests
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        source venv/bin/activate
        pytest backend/tests/test_backend_setup.py
    
    - name: Upload Python virtual environment
      uses: actions/upload-artifact@v4
      with:
        name: venv
        path: venv

  frontend-tests:
    runs-on: ubuntu-latest
    needs: backend-tests
    env:
      DB_DRIVER: ${{ secrets.db-driver || secrets.DB_DRIVER }}
      DB_SERVER: ${{ secrets.db-server || secrets.DB_SERVER }}
      DB_DATABASE: ${{ secrets.db-database || secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.db-username || secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.db-password || secrets.DB_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        npm install react-router-dom axios @mui/material @emotion/react @emotion/styled
        npm install --save-dev @babel/preset-env @babel/preset-react babel-jest @babel/plugin-proposal-private-property-in-object

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test -- --ci --coverage frontend/src/App.test.js
